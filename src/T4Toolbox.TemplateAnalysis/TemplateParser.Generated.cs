// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.3
// DateTime: 28.02.2025 19:35:04
// Input file <TemplateParser.y - 28.02.2025 19:34:35>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.Linq;

namespace T4Toolbox.TemplateAnalysis
{
internal enum SyntaxKind {error=2,EOF=3,Attribute=4,AttributeName=5,AttributeValue=6,
    BlockEnd=7,ClassBlockStart=8,Code=9,CodeBlock=10,Directive=11,DirectiveBlockStart=12,
    DirectiveName=13,DoubleQuote=14,Equals=15,ExpressionBlockStart=16,StatementBlockStart=17,Template=18};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal abstract class ScanBase : AbstractScanner<SyntaxNode,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal class ScanObj {
  public int token;
  public SyntaxNode yylval;
  public LexLocation yylloc;
  public ScanObj( int t, SyntaxNode val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal partial class TemplateParser: ShiftReduceParser<SyntaxNode, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[19];
  private static State[] states = new State[28];
  private static string[] nonTerms = new string[] {
      "TemplateBody", "$accept", "Blocks", "Block", "CodeBlockBody", "DirectiveBody", 
      "CodeBlockStart", "Attributes", "AttributeBody", };

  static TemplateParser() {
    states[0] = new State(-3,new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{17,10,16,11,8,12,2,13,12,16,3,-2},new int[]{-4,4,-5,5,-7,6,-6,15});
    states[4] = new State(-4);
    states[5] = new State(-5);
    states[6] = new State(new int[]{9,7,7,9});
    states[7] = new State(new int[]{7,8});
    states[8] = new State(-7);
    states[9] = new State(-8);
    states[10] = new State(-11);
    states[11] = new State(-12);
    states[12] = new State(-13);
    states[13] = new State(new int[]{7,14,17,-10,16,-10,8,-10,2,-10,12,-10,3,-10});
    states[14] = new State(-9);
    states[15] = new State(-6);
    states[16] = new State(new int[]{13,17});
    states[17] = new State(new int[]{7,26,5,21},new int[]{-8,18,-9,27});
    states[18] = new State(new int[]{7,19,5,21},new int[]{-9,20});
    states[19] = new State(-14);
    states[20] = new State(-17);
    states[21] = new State(new int[]{15,22});
    states[22] = new State(new int[]{14,23});
    states[23] = new State(new int[]{6,24});
    states[24] = new State(new int[]{14,25});
    states[25] = new State(-18);
    states[26] = new State(-15);
    states[27] = new State(-16);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{});
    rules[4] = new Rule(-3, new int[]{-3,-4});
    rules[5] = new Rule(-4, new int[]{-5});
    rules[6] = new Rule(-4, new int[]{-6});
    rules[7] = new Rule(-5, new int[]{-7,9,7});
    rules[8] = new Rule(-5, new int[]{-7,7});
    rules[9] = new Rule(-5, new int[]{2,7});
    rules[10] = new Rule(-5, new int[]{2});
    rules[11] = new Rule(-7, new int[]{17});
    rules[12] = new Rule(-7, new int[]{16});
    rules[13] = new Rule(-7, new int[]{8});
    rules[14] = new Rule(-6, new int[]{12,13,-8,7});
    rules[15] = new Rule(-6, new int[]{12,13,7});
    rules[16] = new Rule(-8, new int[]{-9});
    rules[17] = new Rule(-8, new int[]{-8,-9});
    rules[18] = new Rule(-9, new int[]{5,15,14,6,14});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)SyntaxKind.error, (int)SyntaxKind.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // TemplateBody -> Blocks
{ 
        this.Template = new Template(ValueStack[ValueStack.Depth-1].ChildNodes().ToArray());
    }
        break;
      case 3: // Blocks -> /* empty */
{
        CurrentSemanticValue = new NodeBuilder();
    }
        break;
      case 4: // Blocks -> Blocks, Block
{
        var nodeBuilder = (NodeBuilder)ValueStack[ValueStack.Depth-2];
        nodeBuilder.AddChildNode(ValueStack[ValueStack.Depth-1]);
        CurrentSemanticValue = nodeBuilder;
    }
        break;
      case 7: // CodeBlockBody -> CodeBlockStart, Code, BlockEnd
{
        CurrentSemanticValue = new CodeBlock((CodeBlockStart)ValueStack[ValueStack.Depth-3], (Code)ValueStack[ValueStack.Depth-2], (BlockEnd)ValueStack[ValueStack.Depth-1]);
    }
        break;
      case 8: // CodeBlockBody -> CodeBlockStart, BlockEnd
{
        CurrentSemanticValue = new CodeBlock((CodeBlockStart)ValueStack[ValueStack.Depth-2], (BlockEnd)ValueStack[ValueStack.Depth-1]);
    }
        break;
      case 9: // CodeBlockBody -> error, BlockEnd
{ 
        // Recover from error to continue further parsing
        this.yyerrok(); 
        // Ignore the BlockEnd to avoid endless loop
        this.yyclearin(); 
    }
        break;
      case 10: // CodeBlockBody -> error
{ 
        // Recover from error to continue further parsing
        this.yyerrok(); 
    }
        break;
      case 14: // DirectiveBody -> DirectiveBlockStart, DirectiveName, Attributes, BlockEnd
{
        CurrentSemanticValue = Directive.Create((DirectiveBlockStart)ValueStack[ValueStack.Depth-4], (DirectiveName)ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2].ChildNodes().Cast<Attribute>(), (BlockEnd)ValueStack[ValueStack.Depth-1]);
    }
        break;
      case 15: // DirectiveBody -> DirectiveBlockStart, DirectiveName, BlockEnd
{
        CurrentSemanticValue = Directive.Create((DirectiveBlockStart)ValueStack[ValueStack.Depth-3], (DirectiveName)ValueStack[ValueStack.Depth-2], Enumerable.Empty<Attribute>(), (BlockEnd)ValueStack[ValueStack.Depth-1]);
    }
        break;
      case 16: // Attributes -> AttributeBody
{
        var nodeBuilder = new NodeBuilder();
        nodeBuilder.AddChildNode(ValueStack[ValueStack.Depth-1]);
        CurrentSemanticValue = nodeBuilder;
    }
        break;
      case 17: // Attributes -> Attributes, AttributeBody
{
        var nodeBuilder = (NodeBuilder)ValueStack[ValueStack.Depth-2];
        nodeBuilder.AddChildNode(ValueStack[ValueStack.Depth-1]);
        CurrentSemanticValue = nodeBuilder;
    }
        break;
      case 18: // AttributeBody -> AttributeName, Equals, DoubleQuote, AttributeValue, 
               //                  DoubleQuote
{
        CurrentSemanticValue = new Attribute((AttributeName)ValueStack[ValueStack.Depth-5], (Equals)ValueStack[ValueStack.Depth-4], (DoubleQuote)ValueStack[ValueStack.Depth-3], (AttributeValue)ValueStack[ValueStack.Depth-2], (DoubleQuote)ValueStack[ValueStack.Depth-1]);
    }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((SyntaxKind)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((SyntaxKind)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
